{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/Fable-UUID-Random-Browser.js","fable-uuid.min.js","source/Fable-UUID.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","[object Object]","this","getRandomValues","crypto","bind","window","msCrypto","tmpBuffer","Uint8Array","tmpValue","Math","random","generateWhatWGBytes","generateRandomBytes","2","libRandomByteGenerator","FableUUID","pSettings","_UUIDModeRandom","hasOwnProperty","UUIDModeRandom","_UUIDLength","UUIDLength","_UUIDRandomDictionary","UUIDDictionary","randomByteGenerator","_HexLookup","toString","substr","pBuffer","join","Array","tmpRandomBytes","generate","bytesToUUID","tmpUUID","charAt","floor","generateRandom","generateUUIDv4","new","./Fable-UUID-Random.js"],"mappings":"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","file":"fable-uuid.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Random Byte Generator - Browser version\n*\n* @license MIT\n*\n* @author Steven Velozo <steven@velozo.com>\n*/\n\n// Adapted from node-uuid (https://github.com/kelektiv/node-uuid)\n// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nclass RandomBytes\n{\n\tconstructor()\n\t{\n\n\t\t// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n\t\t// implementation. Also, find the complete implementation of crypto on IE11.\n\t\tthis.getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      \t\t(typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\t}\n\n\t// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n\tgenerateWhatWGBytes()\n\t{\n\t\tlet tmpBuffer = new Uint8Array(16); // eslint-disable-line no-undef\n\n\t\tthis.getRandomValues(tmpBuffer);\n\t\treturn tmpBuffer;\n\t}\n\n\t// Math.random()-based (RNG)\n\tgenerateRandomBytes()\n\t{\n\t\t//\n\t\t// If all else fails, use Math.random().  It's fast, but is of unspecified\n\t\t// quality.\n\t\tlet tmpBuffer = new Uint8Array(16); // eslint-disable-line no-undef\n\n\t\tfor (let i = 0, tmpValue; i < 16; i++)\n\t\t{\n\t\t\tif ((i & 0x03) === 0)\n\t\t\t{\n\t\t\t\ttmpValue = Math.random() * 0x100000000;\n\t\t\t}\n\n\t\t\ttmpBuffer[i] = tmpValue >>> ((i & 0x03) << 3) & 0xff;\n\t\t}\n\n\t\treturn tmpBuffer;\n\t}\n\n\tgenerate()\n\t{\n\t\tif (this.getRandomValues)\n\t\t{\n\t\t\treturn generateWhatWGBytes();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn generateRandomBytes();\n\t\t}\n\t}\n}\n\nmodule.exports = RandomBytes;\n",null,"/**\n* Fable UUID Generator\n*\n* @license MIT\n*\n* @author Steven Velozo <steven@velozo.com>\n* @module Fable UUID\n*/\n\n/**\n* Fable Solution UUID Generation Main Class\n*\n* @class FableUUID\n* @constructor\n*/\n\nvar libRandomByteGenerator = require('./Fable-UUID-Random.js')\n\nclass FableUUID\n{\n\tconstructor(pSettings)\n\t{\n\t\t// Determine if the module is in \"Random UUID Mode\" which means just use the random character function rather than the v4 random UUID spec.\n\t\t// Note this allows UUIDs of various lengths (including very short ones) although guaranteed uniqueness goes downhill fast.\n\t\tthis._UUIDModeRandom = (typeof(pSettings) === 'object') && (pSettings.hasOwnProperty('UUIDModeRandom')) ? (pSettings.UUIDModeRandom == true) : false;\n\t\t// These two properties are only useful if we are in Random mode.  Otherwise it generates a v4 spec\n\t\t// Length for \"Random UUID Mode\" is set -- if not set it to 8\n\t\tthis._UUIDLength = (typeof(pSettings) === 'object') && (pSettings.hasOwnProperty('UUIDLength')) ? (pSettings.UUIDLength + 0) : 8;\n\t\t// Dictionary for \"Random UUID Mode\"\n\t\tthis._UUIDRandomDictionary = (typeof(pSettings) === 'object') && (pSettings.hasOwnProperty('UUIDDictionary')) ? (pSettings.UUIDDictionary + 0) : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n\t\tthis.randomByteGenerator = new libRandomByteGenerator();\n\n\t\t// Lookup table for hex codes\n\t\tthis._HexLookup = [];\n\t\tfor (let i = 0; i < 256; ++i)\n\t\t{\n\t\t\tthis._HexLookup[i] = (i + 0x100).toString(16).substr(1);\n\t\t}\n\t}\n\n\t// Adapted from node-uuid (https://github.com/kelektiv/node-uuid)\n\tbytesToUUID(pBuffer)\n\t{\n\t\tlet i = 0;\n\t\t// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n\t\treturn ([\n\t\t\t\t\tthis._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], \n\t\t\t\t\tthis._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], '-',\n\t\t\t\t\tthis._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], '-',\n\t\t\t\t\tthis._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], '-',\n\t\t\t\t\tthis._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], '-',\n\t\t\t\t\tthis._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]], this._HexLookup[pBuffer[i++]]\n\t\t\t\t]).join('');\n\t}\n\n\t// Adapted from node-uuid (https://github.com/kelektiv/node-uuid)\n\tgenerateUUIDv4()\n\t{\n\t\tlet tmpBuffer = new Array(16);\n\t\tvar tmpRandomBytes = this.randomByteGenerator.generate();\n\n\t\t// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\t\ttmpRandomBytes[6] = (tmpRandomBytes[6] & 0x0f) | 0x40;\n\t\ttmpRandomBytes[8] = (tmpRandomBytes[8] & 0x3f) | 0x80;\n\n\t\treturn this.bytesToUUID(tmpRandomBytes);\n\t}\n\n\t// Simple random UUID generation\n\tgenerateRandom()\n\t{\n\t\tlet tmpUUID = '';\n\n\t\tfor (let i = 0; i < this._UUIDLength; i++)\n\t\t{\n\t\t\ttmpUUID += this._UUIDRandomDictionary.charAt(Math.floor(Math.random() * (this._UUIDRandomDictionary.length-1)));\n\t\t}\n\n\t\treturn tmpUUID;\n\t}\n\n\t// Adapted from node-uuid (https://github.com/kelektiv/node-uuid)\n\tgetUUID()\n\t{\n\t\tif (this._UUIDModeRandom)\n\t\t{\n\t\t\treturn this.generateRandom();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.generateUUIDv4();\n\t\t}\n\t}\n}\n\n// This is for backwards compatibility\nfunction autoConstruct(pSettings)\n{\n\treturn new FableUUID(pSettings);\n}\n\n\nmodule.exports = {new:autoConstruct, FableUUID:FableUUID};\n"]}